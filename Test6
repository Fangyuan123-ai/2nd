import java.util.Scanner;

public class Main {

    int N; // Number of planets
    int[] mass = new int[100000 + 10]; // Mass of planets

    void InputData() {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        for (int i = 0; i < N; i++) {
            mass[i] = sc.nextInt();
        }
        sc.close();
    }

    public static void main(String[] args) {
        Main m = new Main();
        m.InputData(); // Input
        int ans = m.solve(); // Solve the problem
        System.out.println(ans); // Output
    }

    int solve() {
        int count = N - 1; // Count neighboring pairs (always valid)

        // Process all pairs of planets (A, B)
        for (int i = 0; i < N; i++) {
            for (int j = i + 2; j < N; j++) { // Non-neighboring planets only
                if (isValid(i, j)) {
                    count++;
                }
            }
        }

        return count;
    }

    // Check if it's valid to travel between planet A and planet B
    boolean isValid(int A, int B) {
        int minMass = Math.min(mass[A], mass[B]);
        for (int k = A + 1; k < B; k++) {
            if (mass[k] >= minMass) {
                return false;
            }
        }
        return true;
    }
}


import java.util.Scanner;

public class Main {
    int N; // Number of planets
    int[] mass; // Mass of planets

    void InputData() {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        mass = new int[N];
        for (int i = 0; i < N; i++) {
            mass[i] = sc.nextInt();
        }
        sc.close();
    }

    public static void main(String[] args) {
        Main m = new Main();
        m.InputData(); // Input
        int ans = m.solve(); // Solve the problem
        System.out.println(ans); // Output
    }

    int solve() {
        int count = N - 1; // Count neighboring pairs (always valid)

        for (int A = 0; A < N; A++) {
            int maxInWindow = 0; // Reset max for each A
            for (int B = A + 2; B < N; B++) {
                maxInWindow = Math.max(maxInWindow, mass[B - 1]); // Update max in the sliding window
                if (maxInWindow < Math.min(mass[A], mass[B])) {
                    count++; // Valid pair
                } 
                // Do NOT break; continue exploring further windows
            }
        }

        return count;
    }
}

import java.util.Scanner;

public class Main {
    int N; // Number of planets
    int[] mass; // Mass of planets

    void InputData() {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        mass = new int[N];
        for (int i = 0; i < N; i++) {
            mass[i] = sc.nextInt();
        }
        sc.close();
    }

    public static void main(String[] args) {
        Main m = new Main();
        m.InputData(); // Input
        int ans = m.solve(); // Solve the problem
        System.out.println(ans); // Output
    }

    int solve() {
        int count = N - 1; // Count neighboring pairs (always valid)

        for (int A = 0; A < N; A++) {
            int maxInWindow = 0; // Reset max for each A

            for (int B = A + 2; B < N; B++) {
                maxInWindow = Math.max(maxInWindow, mass[B - 1]); // Update max in the sliding window

                if (maxInWindow < Math.min(mass[A], mass[B])) {
                    count++; // Valid pair
                }

                // No need to break; continue checking further windows
            }
        }

        return count;
    }
}
