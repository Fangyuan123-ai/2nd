import java.util.Scanner;
import java.util.Stack;

public class Main {

    int N; // Number of planets
    int[] mass = new int[100000 + 10]; // Mass of planets

    void InputData() {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        for (int i = 0; i < N; i++) {
            mass[i] = sc.nextInt();
        }
        sc.close();
    }

    public static void main(String[] args) {
        Main m = new Main();
        m.InputData(); // Input
        int ans = m.solve(); // Solve the problem
        System.out.println(ans); // Output
    }

    int solve() {
        // Step 1: Initialize count with the neighboring pairs
        int count = N - 1;

        // Step 2: Use a monotonic stack to process non-neighboring pairs
        Stack<Integer> stack = new Stack<>();

        // Process planets in a forward direction
        for (int i = 0; i < N; i++) {
            while (!stack.isEmpty() && mass[stack.peek()] <= mass[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                count++;
            }
            stack.push(i);
        }

        // Clear stack for backward processing
        stack.clear();

        // Process planets in a backward direction
        for (int i = N - 1; i >= 0; i--) {
            while (!stack.isEmpty() && mass[stack.peek()] <= mass[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                count++;
            }
            stack.push(i);
        }

        return count;
    }
}
