import java.util.Scanner;
import java.util.Stack;

public class Main {

    int N; // Number of planets
    int[] mass = new int[100000 + 10]; // Mass of planets

    void InputData() {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        for (int i = 0; i < N; i++) {
            mass[i] = sc.nextInt();
        }
        sc.close();
    }

    public static void main(String[] args) {
        int ans = 0;
        Main m = new Main();
        m.InputData(); // Input

        // Solution starts here
        ans = m.solve();

        System.out.println(ans); // Output
    }

    int solve() {
        int count = N - 1; // Neighboring planets always form valid pairs
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < N; i++) {
            // Remove planets from the stack that are not valid as "smaller intermediate planets"
            while (!stack.isEmpty() && mass[stack.peek()] < mass[i]) {
                stack.pop();
            }

            // Add valid pairs for planets in the stack
            for (int j = 0; j < stack.size(); j++) {
                if (isValid(stack.get(j), i)) {
                    count++;
                }
            }

            // Push the current planet index to the stack
            stack.push(i);
        }
        return count;
    }

    boolean isValid(int a, int b) {
        // Check if all intermediate planets between `a` and `b` are smaller than `mass[a]` and `mass[b]`
        for (int i = a + 1; i < b; i++) {
            if (mass[i] >= mass[a] || mass[i] >= mass[b]) {
                return false;
            }
        }
        return true;
    }
}
