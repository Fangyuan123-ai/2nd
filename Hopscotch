// Add diagonal directions to existing up, down, left, right
int dr[] = {-1, 1, 0, 0, -1, -1, 1, 1};  // All 8 directions
int dc[] = {0, 0, -1, 1, -1, 1, -1, 1};  // All 8 directions

void Touch(int r, int c) {
    int V;
    // Determine new value
    if (A[r][c] == 0 || A[r][c] == 2) V = 1;
    else V = 0;
    
    A[r][c] = V;  // Change touched cell value
    
    // Check all 8 directions
    for (int k = 0; k < 8; k++) {
        int nr = r;
        int nc = c;
        int flag = 0;
        boolean hasBomb = false;
        int endRow = -1;
        int endCol = -1;
        
        // First pass: Find if we have a matching value and check for bombs
        for (;;) {
            nr = nr + dr[k];
            nc = nc + dc[k];
            
            if (nr < 0 || nr >= H || nc < 0 || nc >= W) break;
            if (A[nr][nc] == V) {
                flag = 1;
                endRow = nr;
                endCol = nc;
                break;
            }
            if (A[nr][nc] == 2) {
                hasBomb = true;
            }
        }
        
        // If we found a matching value
        if (flag == 1) {
            nr = r;
            nc = c;
            
            if (hasBomb) {
                // If there's a bomb, change all cells in this direction
                for (;;) {
                    nr = nr + dr[k];
                    nc = nc + dc[k];
                    
                    if (nr < 0 || nr >= H || nc < 0 || nc >= W) break;
                    A[nr][nc] = V;
                }
            } else {
                // No bomb, just change surrounded cells
                for (;;) {
                    nr = nr + dr[k];
                    nc = nc + dc[k];
                    
                    if (nr == endRow && nc == endCol) break;
                    A[nr][nc] = V;
                }
            }
        }
    }
}
