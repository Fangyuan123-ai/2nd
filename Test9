import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {

    class POS {
        int x, y;

        POS(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    int N; // Number of parcels
    POS[] base; // Base positions for the two trucks
    POS[] pos; // Positions of the parcels
    boolean[] visited;
    int minFuel = Integer.MAX_VALUE;

    BufferedReader br;
    BufferedWriter bw;

    void inputData() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st;

        // Read number of parcels
        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        if (N < 1 || N > 8) throw new Exception("Invalid number of parcels (1 <= N <= 8)");

        base = new POS[2];
        pos = new POS[N];
        visited = new boolean[N];

        // Read the positions of the two bases
        for (int i = 0; i < 2; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            base[i] = new POS(x, y);
        }

        // Read the positions of the parcels
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            pos[i] = new POS(x, y);
        }
    }

    void solve() {
        // Explore all possible combinations of parcel assignments
        for (int mask = 0; mask < (1 << N); mask++) {
            int truck1Fuel = calculateFuel(mask, 0); // Truck 1
            int truck2Fuel = calculateFuel(~mask, 1); // Truck 2
            minFuel = Math.min(minFuel, truck1Fuel + truck2Fuel);
        }
    }

    int calculateFuel(int mask, int truckIdx) {
        int fuel = 0;
        int parcels = 0;
        int currX = base[truckIdx].x;
        int currY = base[truckIdx].y;

        for (int i = 0; i < N; i++) {
            if ((mask & (1 << i)) != 0) {
                int distance = Math.abs(currX - pos[i].x) + Math.abs(currY - pos[i].y);
                fuel += distance * (1 + parcels);
                currX = pos[i].x;
                currY = pos[i].y;
                parcels++;
            }
        }

        // Return to the base
        fuel += (Math.abs(currX - base[truckIdx].x) + Math.abs(currY - base[truckIdx].y)) * (1 + parcels);
        return fuel;
    }

    public static void main(String[] args) throws Exception {
        Main m = new Main();
        m.inputData(); // Input
        m.solve(); // Solve the problem
        // Output the result
        m.bw.write(m.minFuel + "\n");
        m.bw.flush();
    }
}
