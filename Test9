import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
    static class POS {
        int x, y;
        POS(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    InputStreamReader reader;
    BufferedReader br;
    BufferedWriter bw;
    int N;
    POS base[];
    POS pos[];
    int minTotalFuel;
    boolean[] globalUsed;
    
    void inputData() throws Exception {
        reader = new InputStreamReader(System.in);
        br = new BufferedReader(reader);
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        
        base = new POS[2];
        pos = new POS[N];
        globalUsed = new boolean[N];
        
        for (int i = 0; i < 2; i++) {
            int x, y;
            st = new StringTokenizer(br.readLine());
            x = Integer.parseInt(st.nextToken());
            y = Integer.parseInt(st.nextToken());
            base[i] = new POS(x, y);
        }
        
        for (int i = 0; i < N; i++) {
            int x, y;
            st = new StringTokenizer(br.readLine());
            x = Integer.parseInt(st.nextToken());
            y = Integer.parseInt(st.nextToken());
            pos[i] = new POS(x, y);
        }
    }

    // Calculate Manhattan distance between two points
    private int getDistance(POS p1, POS p2) {
        return Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y);
    }

    // Calculate fuel needed for a specific route
    private int calculateRouteFuel(ArrayList<Integer> route, POS startBase) {
        if (route.isEmpty()) return 0;
        
        int fuel = 0;
        POS currentPos = startBase;
        int parcels = 0;
        
        // Calculate fuel for route to each point
        for (int pointIndex : route) {
            int distance = getDistance(currentPos, pos[pointIndex]);
            fuel += distance * (1 + parcels);
            currentPos = pos[pointIndex];
            parcels++;
        }
        
        // Add return trip to base
        fuel += getDistance(currentPos, startBase) * (1 + parcels);
        
        return fuel;
    }

    // Try all possible permutations for remaining points for truck 2
    private void tryRemainingPoints(ArrayList<Integer> route1, ArrayList<Integer> route2) {
        boolean allUsed = true;
        for (boolean used : globalUsed) {
            if (!used) {
                allUsed = false;
                break;
            }
        }
        
        if (allUsed) {
            int fuel1 = calculateRouteFuel(route1, base[0]);
            int fuel2 = calculateRouteFuel(route2, base[1]);
            minTotalFuel = Math.min(minTotalFuel, fuel1 + fuel2);
            return;
        }
        
        // Try adding unused points to route2
        for (int i = 0; i < N; i++) {
            if (!globalUsed[i]) {
                globalUsed[i] = true;
                route2.add(i);
                tryRemainingPoints(route1, route2);
                route2.remove(route2.size() - 1);
                globalUsed[i] = false;
            }
        }
    }

    // Generate all possible permutations for truck 1 and remaining for truck 2
    private void generatePermutations(ArrayList<Integer> route1, ArrayList<Integer> route2, int depth) {
        // Try assigning remaining points to truck 2
        tryRemainingPoints(route1, route2);
        
        // Try more points for truck 1
        for (int i = 0; i < N; i++) {
            if (!globalUsed[i]) {
                globalUsed[i] = true;
                route1.add(i);
                generatePermutations(route1, route2, depth + 1);
                route1.remove(route1.size() - 1);
                globalUsed[i] = false;
            }
        }
    }

    private int solve() {
        minTotalFuel = Integer.MAX_VALUE;
        generatePermutations(new ArrayList<>(), new ArrayList<>(), 0);
        return minTotalFuel;
    }

    public static void main(String[] args) throws Exception {
        Main m = new Main();
        m.inputData();
        
        int ans = m.solve();
        
        m.bw.write(ans + "\n");
        m.bw.flush();
    }
}
