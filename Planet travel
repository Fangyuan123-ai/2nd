#include <bits/stdc++.h>

using namespace std;

// Function to solve the problem

int solve(vector<int>& arr) {

int n = arr.size();

vector<int> left(n, -1), right(n, -1); // Vectors to store left and right greater elements

stack<int> s;

// Calculate the previous greater element (left)

for (int i = 0; i < n; i++) {

while (!s.empty() && arr[s.top()] <= arr[i]) s.pop();

if (!s.empty()) left[i] = arr[s.top()];

s.push(i);

}

// Clear stack for the next greater element calculation

while (!s.empty()) s.pop();

// Calculate the next greater element (right)

for (int i = n - 1; i >= 0; i--) { while (!s.empty() && arr[s.top()] <= arr[i]) s.pop(); if (!s.empty()) right[i] = arr[s.top()]; s.push(i);

}
set<tuple<int, int, int>> uniquePairs;

for (int i = 0; i < n; i++) {

if (left[i] != -1 && right[i] != -1 && arr[i] < left[i] && arr[i] < right[i]) {

uniquePairs.emplace(arr[i], left[i], right[i]);

}

}

// Return the count of unique triplets plus (n - 1) for neighboring pairs I

return uniquePairs.size() + n - 1;

}

// Main function

int main() {

int n;

cin >> n; // Input size of the array

vector<int> arr(n);

for (int i = 0; i < n; i++) cin >> arr[i]; // Input array elements

cout << solve(arr) << endl; // Output the result

return 0;

}
