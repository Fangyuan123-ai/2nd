import java.io.*;
import java.util.*;

public class Main {
    int S, E1, E2;
    int ans1, ans2;
    Map<Integer, Integer> factorsMap = new HashMap<>();

    // Precompute factors count for all 4-digit numbers
    void precomputeFactors() {
        for (int i = 1000; i <= 9999; i++) {
            factorsMap.put(i, getFactorsCount(i));
        }
    }

    // Method to read input
    void InputData() throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        String in[] = bf.readLine().split(" ");
        S = Integer.parseInt(in[0]);
        E1 = Integer.parseInt(in[1]);
        E2 = Integer.parseInt(in[2]);
        bf.close();
    }

    // Method to output results
    void OutputData() throws IOException {
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        bw.write(String.valueOf(ans1) + "\n");
        bw.write(String.valueOf(ans2) + "\n");
        bw.flush();
        bw.close();
    }

    // Helper method to calculate the number of factors of a number
    int getFactorsCount(int n) {
        int count = 0;
        for (int i = 1; i * i <= n; i++) {
            if (n % i == 0) {
                count++;
                if (i != n / i) count++;
            }
        }
        return count;
    }

    // Helper method to check if two planets can connect
    boolean canConnect(int a, int b) {
        String strA = String.valueOf(a);
        String strB = String.valueOf(b);

        // Check if only one digit is different
        int diffCount = 0;
        for (int i = 0; i < 4; i++) {
            if (strA.charAt(i) != strB.charAt(i)) {
                diffCount++;
                if (diffCount > 1) return false;
            }
        }

        // Check the difference in factors count
        int factorDiff = Math.abs(factorsMap.get(a) - factorsMap.get(b));
        return diffCount == 1 && factorDiff <= 1;
    }

    // Generate neighbors by changing one digit at a time
    List<Integer> generateNeighbors(int num) {
        List<Integer> neighbors = new ArrayList<>();
        char[] digits = String.valueOf(num).toCharArray();

        for (int i = 0; i < 4; i++) {
            char original = digits[i];
            for (char ch = '0'; ch <= '9'; ch++) {
                if (ch != original) {
                    digits[i] = ch;
                    int neighbor = Integer.parseInt(new String(digits));
                    if (neighbor >= 1000 && neighbor <= 9999 && canConnect(num, neighbor)) {
                        neighbors.add(neighbor);
                    }
                }
            }
            digits[i] = original;
        }
        return neighbors;
    }

    // Breadth-first search to find minimum moves
    int bfs(int start, int target) {
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.add(start);
        visited.add(start);

        int moves = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int current = queue.poll();

                if (current == target) return moves;

                for (int neighbor : generateNeighbors(current)) {
                    if (!visited.contains(neighbor)) {
                        visited.add(neighbor);
                        queue.add(neighbor);
                    }
                }
            }
            moves++;
        }
        return -1; // Should not happen as per problem constraints
    }

    public static void main(String[] args) throws IOException {
        Main m = new Main();
        m.InputData(); // Input function

        // Precompute factors for all 4-digit numbers
        m.precomputeFactors();

        // Calculate minimum moves for both destinations
        m.ans1 = m.bfs(m.S, m.E1);
        m.ans2 = m.bfs(m.S, m.E2);

        m.OutputData(); // Output function
    }
}
