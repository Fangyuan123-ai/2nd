// Updated frontend changes
const onFinish = async (values) => {
  setLoading(true);
  try {
    const response = await vodHomePrvInstance.post(LOGIN, {
      username: values.username,
      password: values.password,
      stage: values.stage // Add stage parameter from form
    });

    if (response?.status === 200) {
      setIsModalVisible(true);
    } else {
      Modal.error({
        title: "Error",
        content: "Invalid Username and password!",
      });
    }
  } catch (error) {
    console.log(error);
    Modal.error({
      title: "Error",
      content: error.response?.data?.message || "Login failed!",
    });
  } finally {
    setLoading(false);
  }
};




// Change from @GetMapping to @PostMapping
@PostMapping(value = "/login")
public ResponseEntity<?> login(
    @RequestBody LoginRequest loginRequest // Receive proper DTO
) throws Exception {
    // Existing logic
}



public class LoginRequest {
    private String username;
    private String password;
    private String stage;
    // getters & setters
}



<Form.Item
  name="stage"
  label="Stage"
  rules={[{ required: true }]}
>
  <Select defaultValue="qa2" style={{ width: 150 }}>
    <Option value="qa2">QA2</Option>
    <Option value="prod">PROD</Option>
    <Option value="local">LOCAL</Option>
  </Select>
</Form.Item>



import java.io.*;
import java.util.*;

enum States {
    Snake,
    Ladder,
    None
}

public class Solution {

    public static void main(String[] args) {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int count = 0;
        try {
            int $case = Integer.parseInt(br.readLine());
            for (int _case = 0; _case < $case; _case++) {
                int arr[][] = new int[100][6];
                States s[] = new States[100];
                for (int k = 0; k < 100; k++) {
                    s[k] = States.None;
                }
                int ladders = Integer.parseInt(br.readLine());
                for (int j = 0; j < ladders; j++) {
                    String str[] = br.readLine().split("\\s");
                    for (int k = 0; k < 6; k++) {
                        arr[Integer.parseInt(str[0]) - 1][k] = Integer.parseInt(str[1]);
                    }
                    s[Integer.parseInt(str[0]) - 1] = States.Ladder;
                }
                int snakes = Integer.parseInt(br.readLine());
                for (int j = 0; j < snakes; j++) {
                    String str[] = br.readLine().split("\\s");
                    for (int k = 0; k < 6; k++) {
                        arr[Integer.parseInt(str[0]) - 1][k] = Integer.parseInt(str[1]);
                    }
                    s[Integer.parseInt(str[0]) - 1] = States.Snake;
                }

                /*for (int i = 0; i < 100; i++) {
                    if (s[i] == States.None) {
                        for (int j = 0; j < 6; j++) {
                            arr[i][j] = (j + 1) + 1;
                        }
                    }
                }*/

                /*for (int i = 0; i < 100; i++) {
                    System.out.print(i + 1 + " :-");
                    for (int j = 0; j < 6; j++) {
                        System.out.print(arr[i][j] + " ");
                    }
                    System.out.println(s[i]);
                }*/
                count = 0;
                int max = -1;
                int maxindex = 0;
                int t = 0;
                while (ladders > 0) {
                    if (s[t] == States.Ladder) {
                        ladders--;
                        if (arr[t][0] > max) {
                            max = arr[t][0];
                            maxindex = t;
                        }
                    }
                    t++;
                }
                int left = 100 - max;
                int dice = 6;
                int win = 100;
                while (left > 0) {
                    if (dice <= 0) {
                        System.out.println("-1");
                        return;
                    }
                    if ((left - dice) >= 0 && s[(win - dice) - 1] != States.Snake) {
                        count++;
                        left -= dice;
                        win -= dice;
                        dice = 6;
                    } else {
                        dice--;
                    }
                }
                left = maxindex;
                while (left > 0) {
                    if ((left - dice) >= 0 && s[(win - dice) - 1] != States.Snake) {
                        count++;
                        left -= dice;
                        win -= dice;
                        dice = 6;
                    } else {
                        dice--;
                    }
                }
                System.out.println(count);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } 
    }
}
